<?php

namespace SmartDevs\ElastiCommerce\Index\Type\Mapping\Field;

use SmartDevs\ElastiCommerce\Util\Data\DataObject;

abstract class FieldTypeBase extends DataObject
{
    /**
     * valid parameters for generating mapping schema
     *
     * @var string[]
     */
    protected $supportedParameters = [];

    /**
     * bypass parameters from autogenerated schema
     *
     * @var string[]
     */
    protected $bypassParameters = [];

    /**
     * valid types to represent this object
     *
     * @var string[]
     */
    protected $validTypes = [];


    /**
     * valid index options for validation
     *
     * @var string[]
     */
    protected $validIndexOptions = [
        'no',
        'not_analyzed',
        'analyzed'
    ];

    public function __construct()
    {
        $this->setIdFieldName('name');
    }

    /**
     * checks an parameter is allowed in schema
     *
     * @param $name
     * @return bool
     */
    protected function isParameterAllowed($name)
    {
        if (false === in_array($name, $this->supportedParameters)) {
            return false;
        }
        if (true === in_array($name, $this->bypassParameters)) {
            return false;
        }
        return true;
    }

    /**
     * checks an value is a node
     *
     * @param $value
     * @return bool
     */
    protected function hasValueChildren($value)
    {
        return count($value->children()) > 0;
    }

    /**
     *
     */
    public function setXmlConfig(\SimpleXMLElement $xml)
    {
        foreach ($xml->children() as $name => $value) {
            if (false === $this->isParameterAllowed($name)) {
                continue;
            }
            if (true === $this->hasValueChildren($value)) {
                $this->setDataUsingMethod($name, $value);
            } else {
                $this->setDataUsingMethod($name, $value->__toString());
            }
        }
        return $this;
    }


    /**
     * {@inheritdoc}
     *
     * @return array
     */
    public function toSchema()
    {
        return array_filter($this->getData(), function ($key) {
            return true === in_array($key, $this->supportedParameters);
        }, ARRAY_FILTER_USE_KEY);
    }

    /**
     * set field type
     *
     * @param string $type
     * @return FieldTypeBase
     * @throws \InvalidArgumentException
     */
    public function setType($type)
    {
        if (false === in_array($type, $this->validTypes, true)) {
            throw new \InvalidArgumentException(sprintf('Invalid type "%s" given', $type));
        }
        $this->setData('type', $type);
        return $this;
    }

    /**
     * set field name
     *
     * @param string
     * @return FieldTypeBase
     */
    public function setName($name)
    {
        $this->setId($name);
        return $this;
    }

    /**
     * get name of type
     *
     * @return mixed
     */
    public function getName()
    {
        return $this->getId();
    }
}