<?php

declare(strict_types=1);

namespace SmartDevs\ElastiCommerce\Index\Type\Mapping;

use SmartDevs\ElastiCommerce\Index\Type\Mapping\Field\{
    FieldTypeBase, FieldTypeDate, FieldTypeNested, FieldTypeNumeric, FieldTypeString
};
use SmartDevs\ElastiCommerce\Util\Data\DataObject;

final class DynamicTemplate extends DataObject
{
    /**
     * Dynamic Template name
     *
     * @var string
     */
    protected $name = null;

    protected $mapping = null;

    /**
     * bypass parameters from autogenerated schema
     *
     * @var string[]
     */
    protected $bypassParameters = [];

    /**
     * valid parameters for generating mapping schema
     *
     * @var string[]
     */
    protected $supportedParameters = [
        'name',
        'path_match',
        'mapping'
    ];

    /**
     * checks an parameter is allowed in schema
     *
     * @param $name
     * @return bool
     */
    protected function isParameterAllowed($name)
    {
        if (false === in_array($name, $this->supportedParameters)) {
            return false;
        }
        if (true === in_array($name, $this->bypassParameters)) {
            return false;
        }
        return true;
    }

    /**
     * checks an value is a node
     *
     * @param $value
     * @return bool
     */
    protected function hasValueChildren($value)
    {
        return count($value->children()) > 0;
    }

    protected function getTypeInstance($type)
    {
        switch ($type) {
            case 'string': {
                $instance = new FieldTypeString();
                break;
            }
            case 'long':
            case 'integer':
            case 'short':
            case 'byte':
            case 'double':
            case 'float': {
                $instance = new FieldTypeNumeric();
                break;
            }
            case 'nested': {
                $instance = new FieldTypeNested();
                break;
            }

            case 'date': {
                $instance = new FieldTypeDate();
                break;
            }
            default: {
                throw new \InvalidArgumentException(sprintf('Invalid type class "%s" given', $type));
            }
        }
        return $instance->setType($type);
    }

    /**
     * set type
     *
     * @param string $type
     * @return DynamicTemplate
     */
    public function setName($name)
    {
        $this->name = $name;
        return $this;
    }

    /**
     * get name
     *
     * @param string $type
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *
     */
    public function setXmlConfig(\SimpleXMLElement $xml)
    {
        foreach ($xml->children() as $name => $value) {
            if (false === $this->isParameterAllowed($name)) {
                continue;
            }
            if ($name === 'mapping') {
                $this->setData('mapping', $this->getTypeInstance(strval($value['type']))->setXmlConfig($value));
                continue;
            }
            if (true === $this->hasValueChildren($value)) {
                $this->setDataUsingMethod($name, $value);
            } else {
                $this->setDataUsingMethod($name, $value->__toString());
            }
        }
        return $this;
    }

    /**
     * generate array for mapping schema
     *
     * @return array
     */
    public function toSchema()
    {
        $return = array();
        foreach ($this->getData() as $propertyName => $propertyData) {
            if ($propertyData instanceof FieldTypeBase) {
                $return[$propertyName] = $propertyData->toSchema();
                continue;
            }
            $return[$propertyName] = $propertyData;
        }
        return $return;
    }
}